def init(f, FoldingRules):
    return FoldingRules([
        f.when(f.last_stroke.folds("-GS", "-GZ")).then(f.append_to_translation(" {^ings}")),
        f.when(f.last_stroke.folds("-G", "_-G").folds_toggled("*")).then(f.unfold_suffix),

        f.when(f.all_strokes.fold("^")).then(f.prepend_to_translation("{^}"))
            .unless_also(
                f.when(f.first_stroke.folds("_")).then(f.prepend_to_translation("{^~|-^}")),
                f.when(f.all_strokes.fold("+")).then(f.append_to_translation("{^}"))
                    .unless_also(
                        f.when(f.last_stroke.folds("_")).then(f.append_to_translation("-{^}")),
                    ),
            ),

        f.when(f.first_stroke.folds("#")).then(f.prepend_to_translation("{-|}")),

        # f.when(f.first_stroke.folds("STK")).then(
        #     f.relookup_after(f.prepending_stroke("TKEUS")),
        #     f.relookup_after(f.prepending_onto_outline("TKEU/S")),
        #     f.modify_translation(lambda translation: f"{{dis^}} {translation}"),
        # ),
        # f.when(f.last_stroke.folds("-LGS"))(f.relookup_after(f.appending_stroke("HRAEUGS"))),
        # f.when(f.last_stroke.folds("-FRPBGS"))(f.relookup_after(f.appending_onto_outline("-PL/TPHAEUGS"))),
    ])